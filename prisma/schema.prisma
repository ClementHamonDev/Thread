// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//NextAuth schemas

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

//App user schema
 
model User {
  id            String    @id @default(cuid())
  username      String 
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  tag           String    @unique
  bio           String?
  createdAt     DateTime @default(now())

  accounts      Account[]
  sessions      Session[]

  followers     Follow[] @relation("follower")
  followeds     Follow[] @relation("followed")

  posts         Post[] 

  likes         Like[]

  @@map("users")
}

model Follow {
  id            String    @id @default(cuid())
  followerID    String
  followingID   String
  createdAt     DateTime @default(now())

  follower      User @relation("follower", fields: [followerID], references: [id], onDelete: Cascade)
  followed      User @relation("followed", fields: [followingID], references: [id], onDelete: Cascade)

  @@map("follows")
}



model Post {
  id            String    @id @default(cuid())
  username      String
  tag           String
  image         String?
  parentID      String?
  userID        String
  content       String
  createAt      DateTime @default(now())

  user          User @relation(fields: [userID], references: [id], onDelete: Cascade)
  replies       Post[] @relation("comments")
  parent        Post? @relation("comments", fields: [parentID], references: [id], onDelete: Cascade)

  likes        Like[]

  @@map("posts")
}

model Like{
  id            String    @id @default(cuid())
  userID        String
  postID        String 
          
  user          User @relation(fields: [userID], references: [id], onDelete: Cascade)
  likedPosts    Post @relation(fields: [postID], references: [id], onDelete: Cascade)

  @@map("likes")
}